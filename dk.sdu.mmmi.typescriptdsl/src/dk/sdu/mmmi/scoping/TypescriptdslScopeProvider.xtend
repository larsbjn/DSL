/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.typescriptdsl.TypescriptdslPackage.Literals
import dk.sdu.mmmi.typescriptdsl.Query
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.typescriptdsl.Select
import dk.sdu.mmmi.typescriptdsl.Field
import org.eclipse.xtext.EcoreUtil2

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class TypescriptdslScopeProvider extends AbstractTypescriptdslScopeProvider {
	
	override getScope(EObject object, EReference ref) {
		if (object instanceof Select && ref == Literals.SELECT__ATTRIBUTES) {
			val q = object as Select
			val c = q.eContainer as Query
			if (c.table !== null) {
				return Scopes.scopeFor(c.table.attributes)	
			}
		}
		if (ref == Literals.FIELD__ATTR) {
			val q = EcoreUtil2.getContainerOfType(object, Query)
			if (q !== null) {
				return Scopes.scopeFor(q.table.attributes)	
			}
		}
        return super.getScope(object, ref)        
    }
}
